ometa CSSBSParser {

    // Tokens

    ident           = m_ident:x                                                     -> [#ident, x],
    atkeyword       = '@' m_ident:x                                                 -> [#atkeyword, x],
    string          = m_string:x                                                    -> [#string, x],
    hash            = '#' m_name:x                                                  -> [#hash, x],
    number          = m_number:x                                                    -> [#number, x],
    percentage      = m_number:x '%'                                                -> [#percentage, x],
    dimension       = number:x m_ident:y                                            -> [#dimension, x, y],
    cdo             = seq('<!--')                                                   -> [#cdo],
    cdc             = seq('-->')                                                    -> [#cdc],
    s               = ((:x m_w(x)) -> x)+:xx                                        -> [#s, xx.join('')],
    attrselector    = (seq('=') | seq('~=') | seq('^=') | seq('$=') | seq('*=')):x  -> [#attrselector, x],
    delim           = ','                                                           -> [#delim, ','],
    comment         = seq('/*') (~seq('*/') char)*:x seq('*/')                      -> [#comment, x.join('')],

    // Macros

    m_ident         = (char:x m_nmstart(x) -> x) (:y m_nmchar(y) -> y)*:z           -> (x + z.join('')),
    m_name          = ((:x m_nmchar(x)) -> x)+:xx                                   -> xx.join(''),
    m_number        = digit+:x '.' digit+:y                                         -> (x.join('') + '.' + y.join(''))
                    | '.' digit+:x                                                  -> ('.' + x.join(''))
                    | digit+:x                                                      -> x.join(''),
    m_string        = '"' (m_string_nl1 | ~'"' char)*:s '"'                         -> ('"' + s.join('') + '"')
                    | '\'' (m_string_nl2 | ~'\'' char)*:s '\''                      -> ('\'' + s.join('') + '\''),
    m_string_nl1    = ('\n' | '\r' | seq('\\"')):x                                  -> x,
    m_string_nl2    = ('\n' | '\r' | seq('\\\'')):x                                 -> x,

    m_nmstart :x    = ?CSSBSParser._m_nmstart(x),
    m_unicode :x    = ?CSSBSParser._m_unicode(x),
    m_escape :x     = ?CSSBSParser._m_escape(x),
    m_nmchar :x     = ?CSSBSParser._m_nmchar(x),
    m_nl :x         = ?CSSBSParser._m_nl(x),
    m_w :x          = ?CSSBSParser._m_w(x),
    m_comment :x    = ?CSSBSParser._m_comment(x)
}

ometa CSSParser <: CSSBSParser {
    sc              = (s | comment),
    stylesheet      = (cdo | cdc | sc | statement)*:x                                                   -> this.concat([#stylesheet], x),
    statement       = (ruleset | atrule),
    atrulepart      = (sc | any | operator),
    mediaq          = atrulepart*:ap                                                                    -> [#mediaq].concat(ap),
    medias          = sc*:s0 ruleset*:r sc*:s1                                                          -> this.concat([#medias], s0, r, s1),
    atrulem         = seq('@media') mediaq:x '{' medias:y '}'                                           -> [#atrulem, x, y],
    atruleb         = atkeyword:ak atrulepart*:ap block:b                                               -> this.concat([#atruleb, ak], ap, [b]),
    atrules         = atkeyword:ak atrulepart*:ap ';'                                                   -> this.concat([#atrules, ak], ap),
    atrule          = (atrulem | atruleb | atrules),
    blockdecl       = sc*:s0 declaration:x decldelim:y sc*:s1                                           -> this.concat(s0, [x], [y], s1)
                    | sc*:s0 declaration:x sc*:s1                                                       -> this.concat(s0, [x], s1)
                    | sc*:s0 decldelim:x sc*:s1                                                         -> this.concat(s0, [x], s1),
    decldelim       = ';'                                                                               -> [#decldelim],
    block           = '{' blockdecl*:x '}'                                                              -> this.concatContent([#block], x),
    ruleset         = selector*:x block:y                                                               -> this.concat([#ruleset], x, [y]),
    combinator      = ('+' | '>' | '~'):x                                                               -> [#combinator, x],
    attrib          = '[' sc*:s0 ident:x sc*:s1 attrselector:a sc*:s2 (ident | string):y sc*:s3 ']'     -> this.concat([#attrib], s0, [x], s1, [a], s2, [y], s3),
    class           = '.' ident:i                                                                       -> [#class, i],
    pseudoe         = seq('::') ident:x                                                                 -> [#pseudoe, x],
    pseudoc         = ':' (function | ident):x                                                          -> [#pseudoc, x],
    pseudo          = (pseudoe | pseudoc),
    nthf            = ':' seq('nth-') (seq('child') | seq('last-child') | seq('of-type') | seq('last-of-type')),
    nth             = (digit | 'n')+:x                                                                  -> [#nth, x.join('')]
                    | (seq('even') | seq('odd')):x                                                      -> [#nth, x],
    nthselector     = nthf:x '(' (sc | unary | nth)*:y ')'                                              -> [#nthselector, x].concat(y),
    simpleselector  = (nthselector | combinator | attrib | pseudo | any | sc)+:x                        -> this.concatContent([#simpleselector], [x]),
    selector        = (simpleselector | delim | sc)+:x                                                  -> this.concat([#selector], x),
    declaration     = property:x ':' value:y                                                            -> [#declaration, x, y],
    property        = ident:x sc*:s0                                                                    -> this.concat([#property, x], s0),
    important       = '!' sc*:s0 seq('important')                                                       -> [#important].concat(s0),
    unary           = ('-' | '+'):x                                                                     -> [#unary, x],
    operator        = ('/' | ',' | ':'):x                                                               -> [#operator, x],
    uri             = seq('url') '(' sc*:s0 string:x sc*:s1')'                                          -> this.concat([#uri], s0, [x], s1)
                    | seq('url') '(' sc*:s0 (~')' ~m_w char)*:x sc*:s1 ')'                              -> this.concat([#uri], s0, [[#raw, x.join('')]], s1),
    value           = (sc | any | block | atkeyword | operator | important)+:x                          -> this.concat([#value], x),
    function        = ident:x '(' (any | sc)*:y ')'                                                     -> this.concat([#function, x], y),
    braces          = '(' sc*:s0 any*:x sc*:s1 ')'                                                      -> this.concat([#braces, '(', ')'], s0, x, s1)
                    | '[' sc*:s0 any*:x sc*:s1 ']'                                                      -> this.concat([#braces, '[', ']'], s0, x, s1),
    any             = (class | string | percentage | dimension | hash | number | uri | function | ident | unary):x  -> x
                    | braces
}

CSSParser.concatContent = function(x, y) {
    y.forEach(function(e) {
        x = x.concat(e);
    });

    return x;
};

CSSParser.concat = function() {
    var x = [];
    for (var i in arguments) {
        x = x.concat(arguments[i]);
    };

    return x;
};
