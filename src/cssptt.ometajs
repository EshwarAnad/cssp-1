ometa CSSBSParser {

    // Tokens

    ident           = m_ident:x                                                     -> [#ident, x],
    atkeyword       = '@' m_ident:x                                                 -> [#atkeyword, x],
    string          = m_string:x                                                    -> [#string, x],
    hash            = '#' m_name:x                                                  -> [#hash, x],
    number          = m_number:x                                                    -> [#number, x],
    percentage      = m_number:x '%'                                                -> [#percentage, x],
    dimension       = m_number:x m_ident:y                                          -> [#dimension, x, y],
    cdo             = seq('<!--')                                                   -> [#cdo],
    cdc             = seq('-->')                                                    -> [#cdc],
    s               = ((:x m_w(x)) -> x)+:xx                                        -> [#s, xx.join('')],
    attrselector    = (seq('=') | seq('~=') | seq('^=') | seq('$=') | seq('*=')):x  -> [#attrselector, x],
    delim           = ','                                                           -> [#delim, ','],
    comment         = seq('/*') anything*:x seq('*/')                               -> [#comment, x.join('')],

    // Macros

    m_ident         = ('-' | '*')*:x (:y m_nmstart(y)) ((:z m_nmchar(z)) -> z)*:zz  -> (x.join('') + y + zz.join('')),
    m_name          = ((:x m_nmchar(x)) -> x)+:xx                                   -> xx.join(''),
    m_number        = digit+:x '.' digit+:y                                         -> (x.join('') + '.' + y.join(''))
                    | '.' digit+:x                                                  -> ('.' + x.join(''))
                    | digit+:x                                                      -> x.join(''),
    m_string        = '"' (m_string_nl1 | ~'"' char)*:s '"'                         -> ('"' + s.join('') + '"')
                    | '\'' (m_string_nl2 | ~'\'' char)*:s '\''                      -> ('\'' + s.join('') + '\''),
    m_string_nl1    = ('\n' | '\r' | '\f' | seq('\\"')):x                           -> x,
    m_string_nl2    = ('\n' | '\r' | '\f' | seq('\\\'')):x                          -> x,

    m_nmstart :x    = ?CSSBSParser._m_nmstart(x),
    m_unicode :x    = ?CSSBSParser._m_unicode(x),
    m_escape :x     = ?CSSBSParser._m_escape(x),
    m_nmchar :x     = ?CSSBSParser._m_nmchar(x),
    m_nl :x         = ?CSSBSParser._m_nl(x),
    m_w :x          = ?CSSBSParser._m_w(x),
    m_comment :x    = ?CSSBSParser._m_comment(x)
}

ometa CSSParser <: CSSBSParser {
    sc              = (s | comment),
    stylesheet      = (cdo | cdc | sc | statement)*:x                                                   -> this.concat([#stylesheet], x),
    statement       = (ruleset | atrule),
    atrulepart      = (any | operator | sc),
    atrule          = seq('@media') atrulepart*:ap '{' sc*:s0 ruleset*:r sc*:s1 '}'                     -> this.concat([#atrulem], ap, s0, r, s1) // media
                    | atkeyword:ak atrulepart*:ap block:b                                               -> this.concat([#atruleb, ak], ap, [b]) // block
                    | atkeyword:ak atrulepart*:ap ';'                                                   -> this.concat([#atrules, ak], ap), // single
    blockdecl      = sc*:s0 declaration:x decldelim:y sc*:s1                                            -> this.concat(s0, [x], [y], s1)
                    | sc*:s0 declaration:x sc*:s1                                                       -> this.concat(s0, [x], s1)
                    | sc*:s0 decldelim:x sc*:sc1                                                        -> this.concat(s0, [x], s1),
    decldelim      = ';'                                                                                -> [#decldelim],
    block           = '{' blockdecl*:x '}'                                                              -> this.concatContent([#block], x),
    ruleset         = selector*:x block:y                                                               -> this.concat([#ruleset], x, [y]),
    combinator      = ('+' | '>' | '~'):x                                                               -> [#combinator, x],
    spaceselector  = s:x any:y                                                                          -> [x, y],
    combiselector  = sc*:s0 combinator:x sc*:s1 any:y                                                   -> this.concat(s0, [x], s1, [y]),
    attrib          = '[' sc*:s0 ident:x sc*:s1 attrselector:a sc*:s2 (ident | string):y sc*:s3 ']'     -> [this.concat([#attrib], s0, [x], s1, [a], s2, [y], s3)],
    class           = '.' ident:i                                                                       -> [#class, i],
    simpleselector = any:x (combiselector | spaceselector | attrib)*:y                                  -> this.concatContent([#simpleselector, x], y),
    selector        = (simpleselector | delim | sc)+:x                                                  -> this.concat([#selector], x),
    declaration     = property:x ':' value:y                                                            -> [#declaration, x, y],
    property        = ident:x sc*:s0                                                                    -> this.concat([#property, x], s0),
    prio            = '!' sc*:s0 seq('important')                                                       -> [#important].concat(s0),
    unary           = ('-' | '+'):x                                                                     -> [#unary, x],
    operator        = ('/' | ',' | ':'):x                                                               -> [#operator, x],
    uri             = seq('url') '(' sc*:s0 string:x sc*:s1')'                                          -> this.concat([#uri], s0, [x], s1)
                    | seq('url') '(' (:x ?(x !== ')') -> x)*:xx ')'                                     -> [#uri, [#raw, xx.join('')]],
    value           = (any | block | atkeyword | operator | sc | prio)+:x                               -> this.concat([#value], x),
    func            = ident:x '(' (any | sc)*:y ')'                                                     -> this.concat([#function, x], y),
    any             = (class | string | percentage | dimension | hash | number | uri | func | ident):x  -> x
                    | unary*:x (percentage | dimension | number):y                                      -> x.concat(y)
                    | '(' sc*:s0 any*:x sc*:s1 ')'                                                      -> this.concat([#braces, '(', ')'], s0, x, s1)
                    | '[' sc*:s0 any*:x sc*:s1 ']'                                                      -> this.concat([#braces, '[', ']'], s0, x, s1)
}

CSSParser.concatContent = function(x, y) {
    y.forEach(function(e) {
        x = x.concat(e);
    });

    return x;
};

CSSParser.concat = function() {
    var x = [];
    for (var i in arguments) {
        x = x.concat(arguments[i]);
    };

    return x;
};

ometa CSSTransformer {
    trans = [:t apply(t):x] -> x,

    ident           :x                  -> [#ident, x],
    atkeyword       :x                  -> [#atkeyword, x],
    string          :x                  -> [#string, x],
    hash            :x                  -> [#hash, x],
    number          :x                  -> [#number, x],
    percentage      :x                  -> [#percentage, x],
    dimension       :x :y               -> [#dimension, x, y],
    cdo                                 -> [#cdo],
    cdc                                 -> [#cdc],
    decldelim                           -> [#decldelim],
    s               :x                  -> [#s, x],
    attrselector    :x                  -> [#attrselector, x],
    attrib          trans*:x            -> [#attrib].concat(x),
    class           trans:x             -> [#class, x],
    delim           :x                  -> [#delim, x],
    stylesheet      :x trans*:y         -> [#stylesheet].concat(y),
    atrulem         trans*:x            -> [#atrulem].concat(x),
    atruleb         trans*:x            -> [#atruleb].concat(x),
    atrules         trans*:x            -> [#atrules].concat(x),
    block           trans*:x            -> [#block].concat(x),
    ruleset         trans*:x            -> [#ruleset].concat(x),
    combinator      :x                  -> [#combinator, x],
    simpleselector  trans*:x            -> [#simpleselector].concat(x),
    selector        trans*:x            -> [#selector].concat(x),
    declaration     trans:p trans:v     -> [#declaration, p, v],
    property        trans*:x            -> [#property].concat(x),
    important       trans*:x            -> [#important].concat(x),
    unary           :x                  -> [#unary, x],
    operator        :x                  -> [#operator, x],
    braces          :x :y trans*:z      -> [#braces, x, y].concat(z),
    value           trans*:x            -> [#value].concat(x),
    comment         :x                  -> [#comment, x],
    uri             trans:x             -> [#uri, x],
    raw             :x                  -> [#raw, x],
    function        trans:x trans*:y    -> [#function, x].concat(y)
}

ometa CSSTranslator {
    trans = [:t apply(t):x] -> x,

    ident           :x                  -> x,
    atkeyword       :x                  -> ('@' + x),
    string          :x                  -> x,
    hash            :x                  -> ('#' + x),
    number          :x                  -> x,
    percentage      :x                  -> (x + '%'),
    dimension       :x :y               -> (x + y),
    cdo                                 -> '<!--',
    cdc                                 -> '-->',
    decldelim                           -> ';',
    s               :x                  -> x,
    attrselector    :x                  -> x,
    attrib          trans*:x            -> ('[' + x.join('') + ']'),
    class           trans:x             -> ('.' + x),
    delim           :x                  -> x,
    stylesheet      :x trans*:y         -> y.join(''),
    atrulem         trans*:x            -> ('@media' + x.join('')),
    atruleb         trans*:x            -> x.join(''),
    atrules         trans*:x            -> (x.join('') + ';'),
    block           trans*:x            -> ('{' + x.join('') + '}'),
    ruleset         trans*:x            -> x.join(''),
    combinator      :x                  -> x,
    simpleselector  trans*:x            -> x.join(''),
    selector        trans*:x            -> x.join(''),
    declaration     trans:p trans:v     -> (p + ':' + v),
    property        trans*:x            -> x.join(''),
    important       trans*:x            -> ('!' + x.join('') + 'important'),
    unary           :x                  -> x,
    operator        :x                  -> x,
    braces          :x :y trans*:z      -> (x + z.join('') + y),
    value           trans*:x            -> x.join(''),
    comment         :x                  -> x,
    uri             trans:x             -> ('url(' + x + ')'),
    raw             :x                  -> x,
    function        trans:x trans*:y    -> (x + '(' + y.join('') + ')')
}
