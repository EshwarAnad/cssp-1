ometa CSSCompressor <: CSSTransformer {
    anys = any*,

    any = ident
        | atkeyword
        | string
        | vhash
        | shash
        | number
        | percentage
        | dimension
        | cdo
        | cdc
        | decldelim
        | s
        | attrselector
        | attrib
        | nth
        | nthselector
        | namespace
        | class
        | pseudoe
        | pseudoc
        | delim
        | stylesheet
        | atruleb
        | atrules
        | atrulerq
        | atrulers
        | atruler
        | block
        | ruleset
        | combinator
        | simpleselector
        | selector
        | declaration
        | property
        | important
        | unary
        | operator
        | braces
        | value
        | filterp
        | progid
        | filterv
        | filter
        | comment
        | uri
        | raw
        | function
        | functionExpression,

    sc = s | comment,

    number = ['number':t :x] -> [t, this.minimizeNumber(x)],

    dimension = ['dimension':t number:x :y] -> this.minimizeDimension(x[1], y),

    vhash = ['vhash' :x] -> this.minimizeColorHash(x),

    attrib = ['attrib':t sc*:s0 ident:x sc*:s1 attrselector:y sc*:s2 (ident | string):z sc*:s3] -> [t, x, y, z],

    nthselector = ['nthselector':t ident:x anys:y] -> [t, x].concat(this.compressValue(y)),

    stylesheet = ['stylesheet':t anys:x] -> [t].concat(this.cleanSC(x)),

    atruleb = ['atruleb':t atkeyword:x sc* block:y] -> [t, x, y]
            | ['atruleb':t atkeyword:x comment+:y (~block any)*:z block:b] -> [t, x, y[0]].concat(this.compressAtRule(z), [b])
            | ['atruleb':t atkeyword:x sc+ (~block any)*:y block:z] -> [t, x, [#s, ' ']].concat(this.compressAtRule(y), [z]),

    atrules = ['atrules':t atkeyword:x sc*] -> [t, x]
            | ['atrules':t atkeyword:x comment sc+ anys:y] -> [t, x, [#s, ' ']].concat(this.compressAtRule(y))
            | ['atrules':t atkeyword:x comment:y anys:z] -> [t, x, y].concat(this.compressAtRule(z))
            | ['atrules':t atkeyword:x sc+ anys:y] -> [t, x, [#s, ' ']].concat(this.compressAtRule(y))
            | ['atrules':t atkeyword:x anys:y] -> [t, x].concat(this.compressAtRule(y)),

    atrulerq = ['atrulerq':t sc*] -> [t]
             | ['atrulerq':t comment sc+ anys:x] -> [t, [#s, ' ']].concat(this.compressAtRule(x))
             | ['atrulerq':t comment:y anys:z] -> [t, y].concat(this.compressAtRule(z))
             | ['atrulerq':t sc+ anys:x] -> [t, [#s, ' ']].concat(this.compressAtRule(x)),

    atrulers = ['atrulers':t sc* ruleset*:r sc*] -> [t].concat(r),

    blockdecls = blockdecls:x sc* (filter | declaration):y decldelim* sc* -> this.concatContent(x, [[y]])
               | sc* (filter | declaration):x decldelim+ sc* -> [x, [#decldelim]]
               | sc* (filter | declaration):x sc* -> [x]
               | sc* decldelim+:x sc* -> []
               | empty -> [],

    block = ['block':t (sc | decldelim)*] -> [t]
          | ['block':t blockdecls:x] -> [t].concat(x),

    simpleselector = ['simpleselector':t anys:x] -> [t].concat(this.compressSimpleSelector(x)),

    property = ['property':t ident:x anys:y] -> [t, x],

    important = ['important':t anys:x] -> [t],

    braces = ['braces':t :x :y anys:z] -> [t, x, y].concat(this.compressValue(z)),

    value = ['value':t anys:x] -> [t].concat(this.compressValue(x)),

    filterp = ['filterp':t :x anys:y] -> [t, x],

    progid = ['progid':t sc* raw:x sc*] -> [t, x],

    filterv = ['filterv':t anys:x] -> [t].concat(x),

    uri = ['uri':t anys:x] -> [t].concat(this.cleanSC(x)),

    function = ['function':t ['ident' 'rgb']:x anys:y] -> this.compressRgb(this.compressValue(y))
             | ['function':t ident:x anys:y] -> [t, x].concat(this.compressValue(y))
}

CSSCompressor.cleanSC = function(x) {
    var r = [];

    x.forEach(function(y) {
        if (!CSSCompressor.isSC(y)) r.push(y);
    });

    return r;
};

CSSCompressor.concatContent = function(x, y) {
    y.forEach(function(e) {
        x = x.concat(e);
    });

    return x;
};

CSSCompressor.cleanSCLeft = function(x) {
    for (var i = 0; i < x.length; i++) if (!this.isSC(x[i])) break;

    return x.slice(i);
};

CSSCompressor.cleanSCRight = function(x) {
    for (var i = x.length - 1; i !== 0; i--) if (!this.isSC(x[i])) break;

    return x.slice(0, i + 1);
};

CSSCompressor.isSC = function(x) {
    return x && (x[0] === 's' || x[0] === 'comment');
};

CSSCompressor.joinSC = function(x) {
    var r = [], t;

    for (var i = 0; i < x.length; i++) {
        t = x[i][0] === 's' ? ['s', ' '] : x[i];
        if (!this.isSC(t) || !this.isSC(r[r.length - 1])) r.push(t);
    }

    return r;
};

CSSCompressor.compressValue = function(x) {
    var r = this.joinSC(this.cleanSCLeft(this.cleanSCRight(x))),
        p, n;

    for (var i = r.length - 1; i > 0; i--) {
        p = r[i - 1];
        n = r[i + 1];
        if (r[i][0] === 's' || r[i][0] === 'comment') {
            if ((p && (p[0] === 'operator' ||
                       p[0] === 'unary')) ||
                (n && (n[0] === 'operator' ||
                       n[0] === 'unary'))) r.splice(i, 1);
        }
    }

    return r;
};

CSSCompressor.compressAtRule = CSSCompressor.compressValue;

CSSCompressor.compressSimpleSelector = function(x) {
    var r = this.joinSC(this.cleanSCLeft(this.cleanSCRight(x))),
        p, n;

    if (r.length > 3) {
        for (var i = r.length - 2; i !== 0; i--) {
            p = r[i - 1];
            n = r[i + 1];
            if (r[i][0] === 's') {
                if (p[0] === 'combinator' ||
                    n[0] === 'combinator') r.splice(i, 1);
            }
        }
    }

    return r;
};

CSSCompressor.minimizeNumber = function(x) {
    if (/^0*/.test(x)) x = x.replace(/^0+/, '');
    if (/\.0*$/.test(x)) x = x.replace(/\.0*$/, '');
    if (x === '.' || x === '') x = '0';

    return x;
};

CSSCompressor.minimizeDimension = function(x, y) {
    return x === '0' ? ['number', '0'] : ['dimension', ['number', x], y];
};

CSSCompressor.minimizeColorHash = function(x) {
    var map = {'f00': 'red',
               'c0c0c0': 'silver',
               '808080': 'gray',
               '800000': 'maroon',
               '800080': 'purple',
               '008000': 'green',
               '808000': 'olive',
               '000080': 'navy',
               '008080': 'teal'},
        _x = x;

    x = x.toLowerCase();

    if (x.length === 6 &&
        x.charAt(0) === x.charAt(1) &&
        x.charAt(2) === x.charAt(3) &&
        x.charAt(4) === x.charAt(5)) x = x.charAt(0) + x.charAt(2) + x.charAt(4);

    return map[x] ? ['string', map[x]] : ['vhash', (x.length < _x.length ? x : _x)];
};

CSSCompressor.compressRgb = function(x) {
    var t, h = '';

    if (x.length === 5 && x[0][0] === 'number' && x[2][0] === 'number' && x[4][0] === 'number') {
        h += (t = Number(x[0][1]).toString(16)).length === 1 ? '0' + t : t;
        h += (t = Number(x[2][1]).toString(16)).length === 1 ? '0' + t : t;
        h += (t = Number(x[4][1]).toString(16)).length === 1 ? '0' + t : t;
        return CSSCompressor.minimizeColorHash(h);
    } else return ['function', ['ident', 'rgb']].concat(x);
};
